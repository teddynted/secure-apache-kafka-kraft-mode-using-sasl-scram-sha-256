service: apache-kafka-kraft-authentication

frameworkVersion: "3"
configValidationMode: error

provider:
  name: aws
  architecture: arm64
  region: ${env:AWS_REGION}
  stage: ${env:STAGE}
  environment: ${file(./iac/environment.yml)}
functions: ${file(./iac/lambda/functions.yml)}
resources:
  Parameters: ${file(./iac/parameters.yml)}
  Resources:
    KafkaClusterIdParameter:
      DependsOn: GenerateClusterId
      Type: AWS::SSM::Parameter
      Properties:
        Name: /kafka/cluster-id
        Type: String
        Value: { "Fn::GetAtt": ["GenerateClusterId", "Value"] }
        Description: Kafka KRaft Cluster ID
        Tier: Standard
    GenerateClusterId:
      Type: Custom::GenerateUUID
      Properties:
        ServiceToken: { "Fn::GetAtt": ["GenerateClusterIdLambdaFunction", "Arn"] }
    ApacheKafkaVPC: ${file(./iac/ec2/vpc/kafka-vpc.yml)}
    ApacheKafkaPrivateSubnet1: ${file(./iac/ec2/vpc/kafka-private-subnet-1.yml)}
    ApacheKafkaPrivateSubnet2: ${file(./iac/ec2/vpc/kafka-private-subnet-2.yml)}
    Ec2RolePolicies: ${file(./iac/ec2/iam/policies.yml)}
    Ec2IAMRole: ${file(./iac/ec2/iam/role.yml)}
    Ec2IAMProfile: ${file(./iac/ec2/iam/profile.yml)}
    Ec2InstanceLambdaIamRole: ${file(./iac/ec2/iam/lambda-role.yml)}
    KafkaConsumerLambdaRole: ${file(./iac/lambda/kafka-consumer-lambda-role.yml)}
    KafkaNodeSecurityGroup: ${file(./iac/ec2/security-group/kafka-sg-node.yml)}
    KafkaIngressSelfRule:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupName: "Kafka Ingress Self Rule"
        GroupId: { "Ref": "KafkaNodeSecurityGroup" }
        IpProtocol: tcp
        FromPort: 9092
        ToPort: 9094
        SourceSecurityGroupId: { "Ref": "KafkaNodeSecurityGroup" }
    BastionIngressRule:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupName: "Bastion Ingress Rule"
        GroupId: { "Ref": "KafkaNodeSecurityGroup" }
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: { "Ref": "BastionSecurityGroup" }
    KafkaIngressSSH:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupName: "Kafka Ingress SSH"
        GroupId: { "Ref": "KafkaNodeSecurityGroup" }
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
    KafkaIngressClients:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupName: "Kafka Node Security Group"
        GroupId: { "Ref": "KafkaNodeSecurityGroup" }
        IpProtocol: tcp
        FromPort: 9092
        ToPort: 9092
        CidrIp: 0.0.0.0/0
    PrometheusSecurityGroup: ${file(./iac/ec2/security-group/prometheus-sg.yml)}
    KafkaBrokerSaslScram256Secrets: ${file(./iac/secrets-manager.yml)}
    KafkaEventSource: ${file(./iac/lambda/apache-kafka-lambda-event-source.yml)}
    NodeOne5: ${file(./iac/ec2/instance/node-1.yml)}
    NodeTwo5: ${file(./iac/ec2/instance/node-2.yml)}
    NodeThree5: ${file(./iac/ec2/instance/node-3.yml)}
    ApacheKafkaPrometheus14: ${file(./iac/ec2/instance/prometheus.yml)}
    ApacheKafkaSNSTopic: ${file(./iac/sns/sns-topic.yml)}
    ApacheKafkaSNSTopicSubscription: ${file(./iac/sns/sns-subscription.yml)}
    ApacheKafkaSNSTopicLambdaPermission: ${file(./iac/sns/sns-lambda-invoke-permission.yml)}
    LambdaSnsReceiverRole: ${file(./iac/lambda/lambda-sns-receiver-role.yml)}
    WebSocketLambdaRole: ${file(./iac/websocket/iam-role.yml)}
    WebSocketAPI: ${file(./iac/websocket/wb-api.yml)}
    ConnectIntegration: ${file(./iac/websocket/connect-integration.yml)}
    DisconnectIntegration: ${file(./iac/websocket/disconnect-integration.yml)}
    MessageIntegration: ${file(./iac/websocket/message-integration.yml)}
    ConnectRoute: ${file(./iac/websocket/connect-route.yml)}
    DisconnectRoute: ${file(./iac/websocket/disconnect-route.yml)}
    MessageRoute: ${file(./iac/websocket/message-route.yml)}
    WebSocketDeployment: ${file(./iac/websocket/web-socket-deployment.yml)}
    WebSocketStage: ${file(./iac/websocket/web-socket-stage.yml)}
    ConnectInvokePermission: ${file(./iac/websocket/connect-invoke-permission.yml)}
    DisconnectInvokePermission: ${file(./iac/websocket/disconnect-invoke-permission.yml)}
    MessageInvokePermission: ${file(./iac/websocket/message-invoke-permission.yml)}
    ConnectionsTable: ${file(./iac/dynamo-db.yml)}
    GenerateClusterIdLambdaRole: ${file(./iac/lambda/generate-cluster-id-lambda-role.yml)}
    KafkaInternetGateway:
      Type: AWS::EC2::InternetGateway
    KafkaAttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: { "Ref": "ApacheKafkaVPC" }
        InternetGatewayId: { "Ref": "KafkaInternetGateway" }
    KafkaPublicSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: { "Ref": "ApacheKafkaVPC" }
        CidrBlock: 10.0.3.0/24
        MapPublicIpOnLaunch: true
        AvailabilityZone: { "Fn::Select": [0, !GetAZs ''] }
    KafkaPublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: { "Ref": "ApacheKafkaVPC" }
        CidrBlock: 10.0.5.0/24
        MapPublicIpOnLaunch: true
        AvailabilityZone: { "Fn::Select": [0, !GetAZs ''] }
    KafkaRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: { "Ref": "ApacheKafkaVPC" }
    KafkaPublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: { "Ref": "KafkaRouteTable" }
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: { "Ref": "KafkaInternetGateway" }
    RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: { "Ref": "KafkaPublicSubnet" }
        RouteTableId: { "Ref": "KafkaRouteTable" }
    KafkaCertBucket: ${file(./iac/s3/certs-bucket.yml)}
    KafkaCertBucketPolicy: ${file(./iac/s3/certs-bucket-policy.yml)}
    BastionHost6: ${file(./iac/ec2/instance/bastion.yml)}
    BastionSecurityGroup: ${file(./iac/ec2/security-group/bastion-security-group.yml)}
    # IAM Role for the Bastion Host
    BastionInstanceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: BastionDescribeEC2Role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: ec2.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        Policies:
          - PolicyName: DescribeEC2Instances
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:DescribeInstances
                    - ssm:DescribeInstanceInformation
                    - ssm:SendCommand
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - ssm:ListCommandInvocations
                    - ssm:GetCommandInvocation
                  Resource: "*"
    # Instance Profile required for EC2 to use the role
    BastionInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Roles:
          - { "Ref": "BastionInstanceRole" }
  Outputs: ${file(./iac/outputs.yml)}