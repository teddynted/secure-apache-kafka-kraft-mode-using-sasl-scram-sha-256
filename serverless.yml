service: apache-kafka-kraft-auth

frameworkVersion: "3"
configValidationMode: error

provider:
  name: aws
  architecture: arm64
  region: ${env:AWS_REGION}
  stage: "dev"
  environment: ${file(./iac/environment.yml)}
functions: ${file(./iac/lambda/functions.yml)}
resources:
  Parameters: ${file(./iac/parameters.yml)}
  Resources:
    ApacheKafkaVPC: ${file(./iac/ec2/vpc/kafka-vpc.yml)}
    ApacheKafkaPrivateSubnet1: ${file(./iac/ec2/vpc/kafka-private-subnet-1.yml)}
    ApacheKafkaPrivateSubnet2: ${file(./iac/ec2/vpc/kafka-private-subnet-2.yml)}
    Ec2RolePolicies: ${file(./iac/ec2/iam/policies.yml)}
    Ec2IAMRole: ${file(./iac/ec2/iam/role.yml)}
    Ec2IAMProfile: ${file(./iac/ec2/iam/profile.yml)}
    Ec2InstanceLambdaIamRole: ${file(./iac/ec2/iam/lambda-role.yml)}
    KafkaConsumerLambdaRole: ${file(./iac/lambda/kafka-consumer-lambda-role.yml)}
    KafkaNodeSecurityGroup: ${file(./iac/ec2/security-group/kafka-sg-node.yml)}
    PrometheusSecurityGroup: ${file(./iac/ec2/security-group/prometheus-sg.yml)}
    KafkaBrokerSaslScram256Secrets: ${file(./iac/secrets-manager.yml)}
    KafkaEventSource: ${file(./iac/lambda/apache-kafka-lambda-event-source.yml)}
    NodeOne: ${file(./iac/ec2/instance/node-1.yml)}
    NodeTwo: ${file(./iac/ec2/instance/node-2.yml)}
    NodeThree: ${file(./iac/ec2/instance/node-3.yml)}
    Prometheus: ${file(./iac/ec2/instance/prometheus.yml)}
    ApacheKafkaPrometheus: ${file(./iac/ec2/instance/prometheus.yml)}
    ApacheKafkaSNSTopic: ${file(./iac/sns/sns-topic.yml)}
    ApacheKafkaSNSTopicSubscription: ${file(./iac/sns/sns-subscription.yml)}
    ApacheKafkaSNSTopicLambdaPermission: ${file(./iac/sns/sns-lambda-invoke-permission.yml)}
    LambdaSnsReceiverRole: ${file(./iac/lambda/lambda-sns-receiver-role.yml)}
    ApacheKafkaBucket: ${file(./iac/s3/apache-kafka-bucket.yml)}
    ApacheKafkaBucketPolicy: ${file(./iac/s3/apache-kafka-bucket-policy.yml)}
  Outputs:
    NodeOnePublicIp:
      Description: Cluster Instance IP Address
      Value: { "Fn::GetAtt": ["NodeOne", "PublicIp"] }
      Export:
        Name: { "Fn::Sub": "${AWS::StackName}-ipaddress-node-1" }
    NodeTwoPublicIp:
      Description: Cluster Instance IP Address
      Value: { "Fn::GetAtt": ["NodeTwo", "PublicIp"] }
      Export:
        Name: { "Fn::Sub": "${AWS::StackName}-ipaddress-node-2" }
    NodeThreePublicIp:
      Description: Cluster Instance IP Address
      Value: { "Fn::GetAtt": ["NodeThree", "PublicIp"] }
      Export:
        Name: { "Fn::Sub": "${AWS::StackName}-ipaddress-node-3" }