StopInstances:
  handler: bootstrap
  runtime: provided.al2
  package:
    artifact: build/stop-instances.zip
    individually: true
  role: { "Fn::GetAtt": ["Ec2InstanceLambdaIamRole", "Arn"] }
  name: ${self:provider.stage}-stop-ec2-instances
  memorySize: 128
  timeout: 240
  events:
    - schedule:
        rate: cron(0 */2 * * ? *)
        enabled: true
        method: scheduler
        timezone: Africa/Johannesburg
  vpc: ${file(./iac/ec2/vpc/lambda-vpc-config.yml)}

StartInstances:
  handler: bootstrap
  runtime: provided.al2
  package:
    artifact: build/start-instances.zip
    individually: true
  role: { "Fn::GetAtt": ["Ec2InstanceLambdaIamRole", "Arn"] }
  name: ${self:provider.stage}-start-ec2-instances
  memorySize: 128
  timeout: 240
  events:
    - schedule:
        rate: cron(0 17 ? * * *)
        enabled: true
        method: scheduler
        timezone: Africa/Johannesburg
  vpc: ${file(./iac/ec2/vpc/lambda-vpc-config.yml)}

KafkaConsumer:
  handler: bootstrap
  runtime: provided.al2
  package:
    artifact: build/apache-kafka-consumer.zip
    individually: true
  role: { "Fn::GetAtt": ["KafkaConsumerLambdaRole", "Arn"] }
  name: ${self:provider.stage}-kafka-consumer-lambda
  timeout: 500
  memorySize: 1800
  vpc: ${file(./iac/ec2/vpc/lambda-vpc-config.yml)}

SNSConsumer:
  handler: bootstrap
  runtime: provided.al2
  package:
    artifact: build/sns-receiver-lambda.zip
    individually: true
  role: { "Fn::GetAtt": ["LambdaSnsReceiverRole", "Arn"] }
  name: ${self:provider.stage}-sns-consumer-lambda
  timeout: 500
  memorySize: 1800
  events:
    - sns:
        arn: { "Ref": "ApacheKafkaSNSTopic" }
        topicName: ${self:provider.stage}-sns-consumer-lambda-topic

WebSocketConnect:
  handler: bootstrap
  runtime: provided.al2
  package:
    artifact: build/websocket-connect.zip
    individually: true
  role: { "Fn::GetAtt": ["WebSocketLambdaRole", "Arn"] }
  name: ${self:provider.stage}-websocket-connect-lambda
  timeout: 500
  memorySize: 1800

WebSocketDisconnect:
  handler: bootstrap
  runtime: provided.al2
  package:
    artifact: build/websocket-disconnect.zip
    individually: true
  role: { "Fn::GetAtt": ["WebSocketLambdaRole", "Arn"] }
  name: ${self:provider.stage}-websocket-disconnect-lambda
  timeout: 500
  memorySize: 1800

WebSocketMessage:
  handler: bootstrap
  runtime: provided.al2
  package:
    artifact: build/websocket-message.zip
    individually: true
  role: { "Fn::GetAtt": ["WebSocketLambdaRole", "Arn"] }
  name: ${self:provider.stage}-websocket-message-lambda
  timeout: 500
  memorySize: 1800