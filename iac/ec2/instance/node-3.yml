Type: AWS::EC2::Instance
DependsOn: [KafkaClusterIdParameter, KafkaBootstrapParameter, KafkaCertBucket, NodeTwo1]
Properties:
  AvailabilityZone: { "Fn::Select": [0,{ "Fn::GetAZs": "" }] }
  InstanceType: { 'Ref': 'InstanceType' }
  ImageId: { 'Ref': 'LatestAmiId' }
  IamInstanceProfile: { 'Ref': 'Ec2IAMProfile' }
  NetworkInterfaces: 
    - AssociatePublicIpAddress: "true"
      DeviceIndex: "0"
      GroupSet: 
        - {"Ref": "KafkaNodeSecurityGroup"}
      SubnetId: {"Ref": "KafkaPublicSubnet"}
  KeyName: { "Fn::Sub": "ec2-keypair-${self:provider.region}-${self:provider.stage}" } #!Join [ "-", [ {"Ref": "KeyPairName"}, { 'Ref': 'AWS::Region' } ] ]
  Tags:
    - Key: Name
      Value: Apache Kafka Kraft Instance 3
  UserData:
    Fn::Base64: !Sub 
    - |
      #!/bin/bash -xe
      exec > >(tee /var/log/user-data.log) 2>&1
      
      # Download and execute with error handling
      if ! curl -fSL https://raw.githubusercontent.com/teddynted/secure-apache-kafka-kraft-mode-using-sasl-scram-sha-256/refs/heads/main/shell-scripts/user-data.sh -o /tmp/user-data.sh; then
        echo "ERROR: Failed to download script"
        exit 1
      fi
      
      chmod +x /tmp/user-data.sh
      if ! /tmp/user-data.sh ${nodeId} ${offsets_topic_replication_factor} ${default_replication_factor}; then
        echo "ERROR: Script execution failed"
        exit 1
      fi
      echo "SUCCESS"
    - nodeId: { "Fn::Sub": [ "${nodeId}", { "nodeId": 3 } ] }
      offsets_topic_replication_factor: { "Fn::Sub": [ "${offsets_topic_replication_factor}", { "offsets_topic_replication_factor": "${env:OFFSETS_TOPIC_REPLICATION_FACTOR}" } ] }
      default_replication_factor: { "Fn::Sub": [ "${default_replication_factor}", { "default_replication_factor": "${env:DEFAULT_REPLICATION_FACTOR}" } ] }